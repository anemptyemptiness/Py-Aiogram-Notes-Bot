import re

from aiogram import F, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message
from pydantic import EmailStr
from sqlalchemy.ext.asyncio import AsyncSession

from bot.db.users.requests import UsersDAO
from bot.fsm.fsm import StartupSG

router = Router(name="startup_router")


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(
        message: Message,
        state: FSMContext,
        session: AsyncSession,
):
    user = await UsersDAO.get_user(
        session=session,
        telegram_id=message.from_user.id
    )

    if not user:
        await message.answer(
            text="üòî –û–π, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                 "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–µ–±–µ –ª–æ–≥–∏–Ω –∏ –ø–æ—á—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö —Å—é–¥–∞!\n\n"
                 "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: <b>—Ç–≤–æ–π_–ª–æ–≥–∏–Ω</b> <b>—Ç–≤–æ—è@–ø–æ—á—Ç–∞.—Ç—É—Ç</b></em>"
        )
        await state.set_state(StartupSG.register)
    else:
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç, <b>{user.name}</b>!\n\n"
                 "/addnote - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                 "/mynotes - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
        )


@router.message(StateFilter(StartupSG.register), F.text)
async def process_registration_command(message: Message, state: FSMContext, session: AsyncSession):
    if len(message.text.split()) == 2:
        regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'

        try:
            name, email = message.text.split()
            if not re.fullmatch(regex, email):
                await message.answer(
                    text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å\n\n"
                         "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: <b>—Ç–≤–æ—è@–ø–æ—á—Ç–∞.—Ç—É—Ç</b></em>",
                )
                return

            await UsersDAO.add_user(
                session=session,
                name=name,
                email=email,
                telegram_id=message.from_user.id,
            )
            await message.answer(
                text=f"–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è, {name}üòä\n\n"
                     "/addnote - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
                     "/mynotes - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
            )
            await state.clear()
        except Exception:
            await message.answer(
                text="ü§î –ö–∞–∂–µ—Ç—Å—è, –≤ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ...\n"
                     "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –∏ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ!",
            )
    else:
        await message.answer(
            text="–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º –Ω—É–∂–Ω–æ...\n"
                 "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –∏–º—è –∏ email\n\n"
                 "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: <b>—Ç–≤–æ–π_–ª–æ–≥–∏–Ω</b> <b>—Ç–≤–æ—è@–ø–æ—á—Ç–∞.—Ç—É—Ç</b></em>",
        )


@router.message(StateFilter(StartupSG.register))
async def warning_registration_command(message: Message):
    await message.answer(
        text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç...\n"
             "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –∏–º—è –∏ email\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: <b>—Ç–≤–æ–π_–ª–æ–≥–∏–Ω</b> <b>—Ç–≤–æ—è@–ø–æ—á—Ç–∞.—Ç—É—Ç</b></em>",
    )