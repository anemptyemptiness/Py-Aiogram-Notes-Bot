from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from telethon import TelegramClient

from bot.db.notes.requests import NotesDAO
from bot.fsm.fsm import AddNoteSG
from bot.lexicon.lexicon import MONTH_DAYS

router = Router(name="add_note_router")


@router.message(Command(commands=["addnote"]), StateFilter(default_state))
async def process_add_note_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏üìù")
    await state.set_state(AddNoteSG.text)


@router.message(StateFilter(AddNoteSG.text), F.text)
async def process_add_note_text_command(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(
        text=f"–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: {message.text}\n"
             "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —è –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±–µ –æ –ø–ª–∞–Ω–∞—Ö!\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:37</em>",
    )
    await state.set_state(AddNoteSG.custom_time)


@router.message(StateFilter(AddNoteSG.custom_time), F.text)
async def process_add_note_custom_time_command(message: Message, state: FSMContext):
    if len(message.text.split(":")) == 2:
        hour, minutes = message.text.split(":")

        if int(hour) < 0 or int(hour) > 23:
            await message.answer(
                text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å!\n\n"
                     "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23!"
            )
        elif int(minutes) < 0 or int(minutes) > 59:
            await message.answer(
                text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–∏–Ω—É—Ç—ã!\n\n"
                     "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59!"
            )
        else:
            await state.update_data(custom_hour=int(hour))
            await state.update_data(custom_minutes=int(minutes))
            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ–±—è "
                     "–≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>\n\n"
                     "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01 (1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞)</em>"
            )
            await state.set_state(AddNoteSG.custom_date)
    else:
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                 "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <em><b>—á–∞—Å:–º–∏–Ω—É—Ç—ã</b></em>\n"
                 "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:37</em>"
        )


@router.message(StateFilter(AddNoteSG.custom_date), F.text)
async def process_add_note_custom_date_command(
        message: Message,
        state: FSMContext,
        session: AsyncSession,
        tc: TelegramClient,
):
    if len(message.text.split("-")) == 3:
        year, month, day = message.text.split("-")
        time_now = datetime.utcnow()

        if int(year) < time_now.year or int(year) > time_now.year + 1:
            await message.answer(
                text="–í–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞ 1 –≥–æ–¥!",
            )
        elif int(month) < time_now.month or int(month) > 12:
            await message.answer(
                text="–í–≤–µ–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Å—è—Ü–µ–≤ (12)!",
            )
        elif int(day) < time_now.day or int(day) > MONTH_DAYS[int(month)]:
            await message.answer(
                text="–í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ!",
            )
        else:
            data = await state.get_data()

            try:
                reminder_time = datetime(
                    year=int(year),
                    month=int(month),
                    day=int(day),
                    hour=data.get("custom_hour"),
                    minute=data.get("custom_minutes"),
                )
                await NotesDAO.add_note(
                    session=session,
                    text=data.get("text"),
                    reminder_time=reminder_time,
                    user_id=message.from_user.id,
                )

                await message.answer(
                    text="–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∑–∞–º–µ—Ç–∫—É —Å–µ–±–µ‚úÖ"
                )
                await message.answer(
                    text="/addnote - —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É\n"
                         "/mynotes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
                )
                await state.clear()
            except Exception:
                await message.answer(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞",
                )
                await state.clear()
                await state.set_state(AddNoteSG.custom_time)
                await state.update_data(text=data.get("text"))
                await message.answer(
                    text=f"–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: {message.text}\n"
                         "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —è –Ω–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±–µ –æ –ø–ª–∞–Ω–∞—Ö!\n\n"
                         "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:37</em>",
                )
    else:
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É!\n\n"
                 "–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>\n"
                 "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01 (1 —è–Ω–≤–∞—Ä—è 2024 –≥–æ–¥–∞)</em>",
        )
